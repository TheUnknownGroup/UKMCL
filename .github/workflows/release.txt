name: 'publish'

 on:
   push:
     branches:
       - main

 jobs:
   publish-tauri:
     permissions:
       contents: write
     strategy:
       fail-fast: false
       matrix:
         include:
           - platform: 'macos-latest'   for Arm based macs (M1 and above).
             args: '--target aarch64-apple-darwin'
           - platform: 'macos-latest'   for Intel based macs.
             args: '--target x86_64-apple-darwin'
           - platform: 'ubuntu-22.04'   for Tauri v1 you could replace this with ubuntu-20.04.
             args: ''
           - platform: 'windows-latest'
             args: ''

     runs-on: ${{ matrix.platform }}
     steps:
       - uses: actions/checkout@v4

       - name: install dependencies (ubuntu only)
         if: matrix.platform == 'ubuntu-22.04'   This must match the platform value defined above.
         run: |
           sudo apt-get update
           sudo apt-get install -y libwebkit2gtk-4.0-dev libwebkit2gtk-4.1-dev libappindicator3-dev librsvg2-dev patchelf
          webkitgtk 4.0 is for Tauri v1 - webkitgtk 4.1 is for Tauri v2.
          You can remove the one that doesn't apply to your app to speed up the workflow a bit.

       - name: setup node
         uses: actions/setup-node@v4
         with:
           node-version: lts/*
           cache: 'npm'   Set this to npm, yarn or pnpm.

       - name: install Rust stable
         uses: dtolnay/rust-toolchain@stable
         with:
            Those targets are only used on macos runners so it's in an `if` to slightly speed up windows and linux builds.
           targets: ${{ matrix.platform == 'macos-latest' && 'aarch64-apple-darwin,x86_64-apple-darwin' || '' }}

       - name: Rust cache
         uses: swatinem/rust-cache@v2
         with:
           workspaces: './src-tauri -> target'

       - name: install frontend dependencies
          If you don't have `beforeBuildCommand` configured you may want to build your frontend here too.
         run: npm install   change this to npm or pnpm depending on which one you use.

       - uses: tauri-apps/tauri-action@v0
         env:
           GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
         with:
           tagName: ukmcl-v__VERSION__
           releaseName: 'UKMCL - Experimental v__VERSION__'
           releaseBody: 'This is another experimental version of our launcher UKMCL. This version includes a login & signup screen.'
           releaseDraft: true
           prerelease: true
           args: ${{ matrix.args }}

name: Build v0.0.0-experimental
      
env:
  ver-exp: v${{ secrets.VERSION }}-experimental+0
  ver: v${{ secrets.VERSION }}+0
jobs:
  build-Linux:
    if: ${{ !contains(github.event.head_commit.message, '[skip]') }}
    permissions:
      contents: write

    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4.2.0
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.0"

      - name: Install Dependencies - Linux
        run: |
          sudo apt-get update
          sudo apt-get install -y ninja-build clang cmake libgtk-3-dev

      - name: Build Linux
        run: flutter build linux --release

      - name: Upload Artifacts - Linux
        uses: actions/upload-artifact@v4
        with:
          name: linux-installer
          path: build/linux/x64/release/bundle

  build-Windows:
    if: ${{ !contains(github.event.head_commit.message, '[skip]') }}

    permissions:
      contents: write

    runs-on: windows-latest
    steps:
      - uses: actions/checkout@v4.2.0
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.0"

      - name: Install Dependencies - Windows
        run: |
          choco install visualstudio2019buildtools -y
          choco install visualstudio2019-workload-vctools -y

      - name: Set up Environment for Windows Build Tools
        run: |
          $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\MSBuild\Current\Bin"
          $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\Common7\IDE"
          $env:Path += ";C:\Program Files (x86)\Microsoft Visual Studio\2019\BuildTools\VC\Tools\MSVC\*\bin\Hostx64\x64"

      - name: Build Windows
        shell: pwsh
        run: |
          flutter config --enable-windows-desktop
          flutter create .
          flutter pub get
          flutter build windows --release
      
      - name: Package Installer - Windows
        run: |
          cd ${{ github.workspace }}/packaging/exe

          copy -r "${{ github.workspace }}/build/windows/x64/runner/Release"

          copy C:\Windows\System32\msvcp140.dll ./Release
          copy C:\Windows\System32\vcruntime140.dll ./Release
          copy C:\Windows\System32\vcruntime140_1.dll ./Release

          copy ./icon.ico ./Release

          curl https://mlaan2.home.xs4all.nl/ispack/innosetup-6.2.1.exe --output innosetup.exe
          Start-Process .\innosetup.exe /VERYSILENT -Wait

          cd "C:\Program Files (x86)\Inno Setup 6"
          iscc "${{ github.workspace }}/packaging/exe/installer.iss"

      - name: Upload Artifacts - Windows
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer
          path: ${{ github.workspace }}/packaging/exe/UKMCL-Windows-Installer-en_US.exe

      - name: Upload Artifacts - Windows (zip)
        uses: actions/upload-artifact@v4
        with:
          name: windows-installer-zip
          path: ${{ github.workspace }}/packaging/exe/Release

  build-macOS:
    if: ${{ !contains(github.event.head_commit.message, '[skip]') }}

    permissions:
      contents: write 
    
    runs-on: macos-latest
    steps:
      - uses: actions/checkout@v4.2.0
      
      - name: Set up Flutter
        uses: subosito/flutter-action@v2
        with:
          flutter-version: "3.27.0"

      - name: Build macOS
        run: |
          flutter pub get
          flutter build macos

      - name: Packager Installer - macOS
        run: |
          cp assets/icon.icns build/macos/Build/Products
          cd build/macos/Build/Products
          brew install create-dmg
          create-dmg \
            --volname "UKMCL Installer" \
            --volicon "icon.icns" \
            --window-pos 200 120 \
            --window-size 950 530 \
            --icon-size 100 \
            --icon "UKMCL.app" 200 190 \
            --hide-extension "UKMCL.app" \
            --app-drop-link 600 185 \
            "UKMCL-Installer.dmg" \
            "Release/"
          mv UKMCL-Installer.dmg UKMCL-macOS-Installer-en_US.dmg

      - name: Upload Artifacts - macOS
        uses: actions/upload-artifact@v4
        with:
          name: macos-installer
          path: build/macos/Build/Products

  release:
    permissions:
      contents: write

    if: ${{ !contains(github.event.head_commit.message, '[skip]') }}

    needs: [ build-Linux, build-Windows, build-macOS ]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4.2.0
      - uses: dart-lang/setup-dart@v1.7.0

      - name: Download Files
        uses: actions/download-artifact@v4

      - run: chmod +x linux-installer/UKMCL

      - name: Zip Linux
        uses: thedoctor0/zip-release@main
        with:
          type: "zip"
          filename: "UKMCL-Linux-Installer-en_US.zip"
          path: linux-installer

      - name: Zip Windows
        uses: thedoctor0/zip-release@main
        with:
          type: "zip"
          filename: "UKMCL-Windows-Installer-en_US.zip"
          path: windows-installer-zip

      - name: Package Installer - Linux
        run: |
          cp -r linux-installer packaging/deb/opt/UKMCL/Binary
          sed -i 's/${VERSION}/${{ env.ver-exp }}/g' packaging/deb/DEBIAN/control
          fakeroot dpkg-deb --build packaging/deb "UKMCL-Linux-Installer-en_US.deb"

      - name: Create Release
        uses: "marvinpinto/action-automatic-releases@v1.2.0"
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          title: "UKMCL ${{ env.ver-exp }}"
          automatic_release_tag: "${{ env.ver-exp }}"
          prerelease: true
          draft: true
          files: |
            UKMCL-Linux-Installer-en_US.deb
            UKMCL-Linux-Installer-en_US.zip
            UKMCL-Windows-Installer-en_US.zip
            windows-installer/UKMCL-Windows-Installer-en_US.exe
            macos-installer/UKMCL-macOS-Installer-en_US.dmg 
